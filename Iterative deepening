#include<bits/stdc++.h> 
using namespace std; 
vector<int> graph[22]; 
void addEdge(int v1, int v2) { 
graph[v1].push_back(v2); 
graph[v2].push_back(v1); 
} 
void DFS(int startnode, int depth, int visit[]) 
{ 
if (depth < 0 || visit[startnode]) return; 
cout << startnode << " "; 
visit[startnode] = 1; for (auto it 
: graph[startnode]) { if 
(!visit[it]) { 
DFS(it, depth - 1, visit); 
} 
} 
} 
void deepeningDFS(int startnode, int depth) { 
cout << endl; for (int i = 0; i <= 
depth; i++) { int visit[22] = {0}; 
cout << "Depth: " << i << " -> "; 
DFS(startnode, i, visit); 
cout << endl; 
} 
} 
int main() { 
addEdge(1, 2); 
addEdge(1, 3); 
addEdge(1, 4); 
addEdge(1, 5); 
addEdge(2, 6); 
addEdge(2, 7); 
addEdge(2, 8); 
addEdge(3, 8); 
addEdge(3, 9); 
addEdge(3, 10); 
addEdge(4, 10); 
addEdge(4, 11); 
addEdge(4, 12); 
addEdge(5, 12); 
addEdge(7, 8); 
addEdge(6, 13); 
addEdge(6, 14); 
addEdge(6, 15); 
addEdge(7, 16); 
addEdge(8, 16); 
addEdge(8, 17); 
addEdge(9, 17); 
addEdge(9, 18); 
addEdge(10, 18); 
addEdge(10, 19); 
addEdge(11, 19); 
addEdge(12, 20); 
addEdge(12, 21); 
int startnode = 1; int depth = 3; cout << "Starting Node: " << 
startnode << " MaxDepth: " << depth << endl; deepeningDFS(startnode, 
depth); 
return 0;}
